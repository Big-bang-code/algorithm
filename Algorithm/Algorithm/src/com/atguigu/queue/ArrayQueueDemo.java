package com.atguigu.queue;

import java.util.Scanner;

/**
 * 这是一个数组模拟队列
 * 
 * @Title ArrayQueueDemo.java
 * @Description
 * @author 孟BIG
 * @date2019年8月4日
 */
public class ArrayQueueDemo {
	public static void main(String[] args) {
		//创建一个队列
		ArrayQueue arrayQueue = new ArrayQueue(3);
		char key = ' ';//接收用户输入
		Scanner scan = new Scanner(System.in);
		boolean loop = true;
		//输出一个菜单
		while(loop) {
			System.out.println("s(show):显示队列");
			System.out.println("e(exit):退出程序");
			System.out.println("a(add):添加数据到队列");
			System.out.println("g(get):从队列取出数据");
			System.out.println("h(head):查看队列头的数据");
			key = scan.next().charAt(0);//接收一个字符
			switch (key) {
			case 's':
				arrayQueue.showQueue();
				break;
			case 'a':
				System.out.println("输入一个数字");
				int value = scan.nextInt();
				arrayQueue.addQueue(value);
				break;
			case 'g':
				try {
					int res = arrayQueue.getQueue();
					System.out.printf("取出数据是%d\n",res);
				} catch (Exception e) {
					System.out.println(e.getMessage());
				}
				break;
			case 'h'://查看队列头的数据
				try {
					int res = arrayQueue.headQueue();
					System.out.printf("队列头的数据是%d/n",res);
				} catch (Exception e) {
					System.out.println(e.getMessage());
				}
				break;
			case 'e':
				scan.close();
				loop = false;
			default:
				break;
			}
		}
		System.out.println("程序退出");
	}
}

//使用数组模拟队列――编写一个ArrayQueue类
class ArrayQueue {
	private int maxSize;// 表示数组的最大容量
	private int front;// 队列头
	private int rear;// 队列尾
	private int[] arr;// 该数据用于存放数据，模拟队列

	// 1.创建队列的构造器
	public ArrayQueue(int arrMaxSize) {
		maxSize = arrMaxSize;
		arr = new int[maxSize];
		front = -1;// 指向队列头部，分析出front是指向队列头的前一个位置
		rear = -1;// 指向队列尾，指向队列尾的数据(就是队列最后一个数据)
	}

	// 判断队列是否满了
	public boolean isFull() {
		return rear == maxSize - 1;
	}

	// 判断队列是否为空
	public boolean isEmpty() {
		return rear == front;
	}

	// 添加数据到队列
	public void addQueue(int n) {
		// 判断队列是否满了
		if (isFull()) {
			System.out.println("队列满了，不能输入");
			return;
		}
		rear++;// 让rear后移
		arr[rear] = n;
	}

	// 获取队列的数据，出队列
	public int getQueue() {
		// 判断队列是否为空
		if (isEmpty()) {
			// 通过抛出异常处理
			throw new RuntimeException("队列为空，不能取数据");
		}
		front++;// 让front后移
		return arr[front];
	}

	// 显示队列的所有数据
	public void showQueue() {
		// 遍历
		if (isEmpty()) {
			System.out.println("队列为空，没有数据");
			return;
		}
		for (int i = 0; i < arr.length; i++) {
			System.out.printf("arr[%d]=%d\n", i, arr[i]);
		}
	}

	// 显示队列的头数据，注意不是取出数据
	public int headQueue() {
		// 判断队列为空
		if (isEmpty()) {
			throw new RuntimeException("队列为空，不能取数据");
		}
		return arr[front + 1];
	}

}
